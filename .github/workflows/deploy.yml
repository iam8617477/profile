name: Deploy Django App to Server

on:
  push:
    branches:
      - main

jobs:

  lint:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install linters
        run: |
          pip install black==24.10.0 isort==5.13.2 flake8==7.1.1

      - name: Run linters
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only --diff .

  test:
    runs-on: ubuntu-latest
    needs: lint

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432

    env:
      DATABASE_URL: postgres://test_user:test_password@localhost:5432/test_db
      DJANGO_SETTINGS_MODULE: app.settings
      SECRET_KEY: test_key
      DEBUG: 'True'
      POSTGRES_HOST: localhost
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_password
      POSTGRES_DB: test_db
      POSTGRES_PORT: 5432
      OPENAI_API_KEY: test_key

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 0

      - name: Configure Git for submodules
        run: |
          git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "git@github.com:"

      - name: Update submodules
        run: |
          git submodule update --init --recursive

      - name: Add submodule to PYTHONPATH
        run: |
          echo "PYTHONPATH=$PYTHONPATH:$(pwd)/pckgs" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U test_user; do
            echo "Waiting for PostgreSQL..."
            sleep 1
          done

      - name: Run migrations
        run: |
          python manage.py migrate --no-input

      - name: Run tests
        run: |
          pytest

  deploy:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: SSH into Server and Deploy
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.REMOTE_HOST }}
          username: ${{ secrets.REMOTE_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.SSH_PASSPHRASE }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            echo "Connecting to server..."
            echo "Running docker system prune..."
            eval "$(ssh-agent -s)"
            ssh-add ~/.ssh/${{ secrets.GIT_REPO_KEYNAME }}
            docker system prune -f
            if [ ! -d "profile" ]; then
                echo "Cloning project repository..."
                git clone --recurse-submodules ${{ secrets.GIT_REPO_URL }}
                cd profile
            else
                echo "Repository exists. Fetching latest changes..."
                cd profile
                git fetch
                git switch main
                git reset --hard origin/main
                echo "Updating submodules..."
                git submodule update --init --recursive
            fi
            docker compose down || echo "Containers are already stopped or not running"
            echo "Restarting Docker Compose..."
            SECRET_KEY=${{ secrets.SECRET_KEY }} \
            DEBUG=${{ secrets.DEBUG }} \
            POSTGRES_DB=${{ secrets.POSTGRES_DB }} \
            POSTGRES_USER=${{ secrets.POSTGRES_USER }} \
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} \
            POSTGRES_HOST=${{ secrets.POSTGRES_HOST }} \
            POSTGRES_PORT=${{ secrets.POSTGRES_PORT }} \
            REMOTE_HOST=${{ secrets.REMOTE_HOST }} \
            REMOTE_HOST_NAME=${{ secrets.REMOTE_HOST_NAME }} \
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }} \
            docker compose -f docker-compose.yml up -d --build --scale web=1

            echo "Deployment complete!"
